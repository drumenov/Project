@model X.PagedList.PagedList<TechnicianViewModel>
@inject Microsoft.AspNetCore.Identity.UserManager<Project.Models.Entities.User> userManager

<div class="card">
    <div class="card-header">
        All Technicians
    </div>
    <div class="card-body d-flex justify-content-between">
        @foreach (var technician in Model) {
            <p class="card-text">
                <a asp-action="@StringConstants.ActionNameTechnicianDetails"
                   asp-controller="@StringConstants.TechnicianControllerName"
                   asp-area="@StringConstants.AreaNameAdministration"
                   asp-route-technicianName="@technician.Username">
                    @technician.Username
                </a>
            </p>
            {
                var currentTechnician = await userManager.FindByNameAsync(technician.Username);
                string role = userManager.GetRolesAsync(currentTechnician).GetAwaiter().GetResult()[0];
                <div class="d-flex">
                    <form method="post"
                          asp-action="@StringConstants.ActionNamePromoteTechnician"
                          asp-controller="@StringConstants.TechnicianControllerName"
                          asp-area="@StringConstants.AreaNameAdministration"
                          asp-route-technicianName="@(technician.Username)">
                        <input type="submit"
                               class="btn btn-success mr-2 @(role.Equals(StringConstants.ExpertTechnicianUserRole, StringComparison.OrdinalIgnoreCase) ? "disabled" : String.Empty)"
                               value="Promote" />
                    </form>
                    <form method="post"
                          asp-action="@StringConstants.ActionNameDemoteTechnician"
                          asp-controller="@StringConstants.TechnicianControllerName"
                          asp-area="@StringConstants.AreaNameAdministration"
                          asp-route-technicianName="@technician.Username">
                        <input type="submit"
                               class="btn btn-danger @(role.Equals(StringConstants.NoviceTechnicianUserRole, StringComparison.OrdinalIgnoreCase) ? "disabled" : String.Empty)"
                               value="Demote" />
                    </form>
                </div>
            }
        }
    </div>
    <div class="d-block ml-3">
        @if (Model.Count != 0) {
            @Html.PagedListPager(Model, page => Url.Action(StringConstants.ActionNameIndex, StringConstants.HomeControllerName, new {
            adminsPage = TempData[StringConstants.TempDataKeyHoldingThePageNumberForAdministrators],
            customersPage = TempData[StringConstants.TempDataKeyHoldingThePageNumberForCustomers],
            techniciansPage = page,
            pendingRepairTasks = TempData[StringConstants.TempDataKeyHoldingThePageNumberForPendingRepairTasks],
            workedOnRepairTasksPage = TempData[StringConstants.TempDataKeyHoldingThePageForWorkedOnRepairTasks],
            finishedRepairTasksPage = TempData[StringConstants.TempDataKeyHoldingThePageForFinishedRepairTasks]}),
            new X.PagedList.Mvc.Common.PagedListRenderOptions {
                LiElementClasses = new string[] {"page-item"},
                PageClasses = new string[] {"page-link"}
            })
        }
    </div>
</div>
